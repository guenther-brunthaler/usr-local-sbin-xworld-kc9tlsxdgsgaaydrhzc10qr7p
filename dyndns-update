#! /bin/sh
show_version() {
	wr . <<- EOF
	$APP Version 9.24
	(c) 2009 by Guenther Brunthaler.

	This script is free software.
	Distribution is allowed under the terms of the GPLv3.
	EOF
}


show_help() {
	wr <<- EOF
	$APP - publish local IP address to dynamic DNS server

	$APP determines the current IP address of network interface $IF and
	invokes the "$CLIENT" dynamic update client in order to publish it to
	the configured dynamic DNS provider.
	
	Usage: $APP [ options ]
	
	options:

	--help, -h: Display this help text.
	
	--version: Display version information.
	
	--interface <name>, -i <name>: Use interface <name> rather than "$IF".
	
	--force, -f: Force updating the current IP address even if the server
	already has the current address set or if the minimum update delay
	interval has not yet been exceeded. Use with care - using this option
	might violate your dynamic update provider's policy and may even lock
	or delete your account due to misuse in the worst case.
	
	Unless run with the --force option, $APP is safe to use because
	"$CLIENT" will only update the IP address if actually necessary.
	
	Why should you use this wrapper script instead of invoking "$CLIENT"
	directly?
	
	Because it determines all the necessary command line options
	automatically and also checks for errors.

	EOF
	show_version
}


warn() {
	echo "WARNING: $*" >& 2
}


die() {
	echo "ERROR: $*" >& 2
	false; exit
}


run() {
	"$@" && return
	die "Failed executing >>>$*<<<: Return code ${?}!"
}


system() {
	REPLY="`run "$@"`" || exit
}


# Wrap stdin or arguments to $LINEWIDTH characters.
# If $1 is ".", wrap only but do not fill paragraphs.
wr() {
	local S
	if test x"$1" = x"."; then
		S=-s; shift
	fi
	if test $# -gt 0; then
		run printf '%s\n' "$*" | wr
	else
		run fmt $S -w $LINEWIDTH
	fi
}


nope() {
	warn "Refusing to publish reserved private internet address!"
}


get_ip() {
	LC_ALL=C run ifconfig "$1" \
		| run sed -e 's/.* inet addr:\([^ ]*\).*/\1/;t;d'
}


APP=${0##*/}
# Determine output line width.
LINEWIDTH=
REPLY=
tty -s <& 1 && system tput cols
LINEWIDTH=${REPLY:-70}
# Start of command line processing.
# Define presets.
FORCE=
IF=ppp0
CLIENT=ddclient
#
COPTS=
while true; do
	if [ -z "$COPTS" ]; then
		case "$1" in
			-?*) COPTS="$1"; shift;;
			*) break;;
		esac
	fi
	if [ "${COPTS#--}" = "$COPTS" ]; then
		TAIL="${COPTS#-?}"; # Switch clustering.
		COPT="${COPTS%$TAIL}"; COPTS="${TAIL:+-}$TAIL"
	else
		COPT="$COPTS"; COPTS=
	fi
	# Any arguments are at $1 and onwards; must be shifted off.
	case "$COPT" in
		--) break;; # Must be first!
                --help | -h) show_help | less --quit-if-one-screen; exit;;
		--version) show_version; exit;;
		--force | -f) FORCE=1;;
		--interface | -i) IF=$1; shift;;
		*) die "Unknown option '$COPT'!";; # Must be last!
	esac
done
# Shift off ordinal arguments.
#test $# -ge 1 && { WORKDIR="$1"; shift; }
#test $# -ge 1 || die "Missing argument - limit for accumulated sum!"
#LIMIT="$1"; shift
# Check for excess arguments.
test $# = 0 || die "Unexpected excess arguments: $*"
# End of command line processing.
PATH=/usr/sbin:${PATH}
system get_ip "$IF"; IP=$REPLY
test -n "$IP" || die "Could not determine IP address of interface $IF!"
## update the DNS server unless the IP address is a private address
## that may be used as an internal LAN address (or PPtP tunnel).
case "$IP" in
	10.*) nope;;
	172.1[6-9].* | 172.2[0-9].* | 172.3[0-1].*) nope;;
	192.168.*) nope;;
	"") warn "No local IP given so cannot update!";;
	*)		
		set -- "$CLIENT"
		set -- "$@" -daemon=0 --noquiet --verbose -use=if -if="$IF"
		test -n "$FORCE" && set -- "$@" --force
		run "$@"
		;;
esac
