#! /usr/bin/perl -w
#
# A synthesizer for customized $HOME/.joe files.
#
# Version 2018.242
# Copyright (c) 2007-2018 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

# First, some general comments on the "joe" file type detection feature.
#
# In order to make block of settings depending on a file type, two sorts of
# conditions are supported.
#
# The first one is to check for a file extension such as "*" (matches all
# extensions) or "*.txt" (matches only files ending in ".txt"). Possibly this
# may not only match file extensions but arbitrary "glob" wildcards, but I
# have never tried it.
#
# The second sort is a "joe"-style regular expression which has to match the
# start of the file's contents. Such conditions need to be preceeded with a
# "+" character at the beginning of the line, immediately being followed by a
# match expression with no separating white space. These are the same
# expressions as used in joe's built-in search command. Note that such
# expressions may include "\n", and will then match more than just the very
# first line.
#
# Note that joe's regular expressions have changed with later versions. For
# instance, now x\+ does what did \+x did previously. In the case of postfix
# RE operators only, the '\' must be omitted in file-contents sniffing RE
# patterns. The '\' must also be omitted for character class patterns.
#
# Also note that while joe's "\*" wildcard does not match a "\n", its "\+"
# can. Unfortunately, set complement "\[^x]" does not include control
# characters, and sets may not include nested sets or wildcards. Therefore,
# one has to try something like this to match a multi-line range of text
# starting with the substring "begin" and ending with the substring "end":
#
# "begin[A-Za-z# .,:\n]+end".
#
# Of those two types of conditions, the first type is mandatory for a new
# block of statements - even if it is just "*".
#
# More conditions can follow the first condition of a new block of
# statements.
#
# But those conditions will always be logical AND-combined with the other
# conditions.
#
# This means that
#
# *.c
# *.h
#
# will never match anything. Instead, two separate blocks need to be
# created, using a single wildcard expression per block only.
#
# This is what the "duplicate"-feature of this tool has been made for.
#
# Also note that if more than one block matches, only the last matching block
# is actually used. The blocks should therefore be ordered from most general
# to most specific pattern.


# What files this tool shall read, transform and generate.
my @joerc_files= (
   {
        original => '/etc/joe/joerc'
      , critical => 1
      , modified_target => '/usr/local/etc/skel/.joerc'
   }, {
        original => '/etc/joe/ftyperc'
      , modified_target => '/usr/local/etc/skel/.joe'
   }
);
my $begin_modification_tag= ' # *** BEGIN CHANGES BLOCK';
my $end_modification_tag= ' # *** END CHANGES BLOCK';
$ENV{NULL}= "";
# Frequently used variants. Use 'USER_' prefix.
my $USER_prog= << '.';
   -indentc 32
   -istep 3
   -spaces
.
my $USER_prog2= << '.';
   -indentc 32
   -istep 2
   -spaces
.
my $USER_prog_x= << '.' . $USER_prog;
   -tab 3
.
my $USER_prog2_x= << '.' . $USER_prog2;
   -tab 2
.
my $USER_autoprog_x= << '.' . $USER_prog_x;
   -autoindent
   -smartbacks
   -smarthome
.
my $USER_OCAML_prog= << '.' . $USER_prog2_x;
   -syntax ocaml
.
my $USER_nowrap= '--wordwrap';
my $USER_pnowrap= << "." . $USER_prog;
   $USER_nowrap
.
my $USER_SIMPLICITY= << "." . $USER_prog2_x;
   \40
    Simplicity source file
   *
   +#![ \t]+[a-z/]+/env simple\\>
   +#![ \t]+[a-z/]+/env sim\\>
.
my $USER_VALA= << "." . $USER_autoprog_x
   \40
    Vala/Genie source file
   *.gir
.
. << "." . $USER_autoprog_x
   *.vala
.
. << "." . $USER_autoprog_x
   *.gs
.
. << "." . $USER_autoprog_x;
   *.vapi
.
my $USER_TCL= << ".";
   -autoindent
   -title
   -syntax tcl
.
$USER_TCL= << "."
    TCL via shabang
    (According to FHS 2.3, the following
    executables must at least have a symlink in
    /usr/bin if they are installed at all.)
.
. do {
   my $out= '';
   my($ind)= $USER_TCL =~ /^(\s+)/;
   my$pfx= "[ \t]+[a-z/]+";
   foreach my $rx ("$pfx/", "$pfx\\n#\\*\\\\nexec ") {
      foreach my $tool (qw/tclsh wish expect/) {
         $out.= "$ind\n*$ind#+!$rx$tool\\>\n" . $USER_TCL . $USER_prog_x;
      }
   }
   $out;
};
my $USER_NEWSTUFF= << "EOF"
   \40
    Completely new entries.
   \40
EOF
   . $USER_VALA
   . $USER_SIMPLICITY
;
my $USER_RUBY= << "." . $USER_prog_x;
   +#![ \t]+[a-z/]+/env ruby\\>
.
my $USER_JavaScript= [map << "=" . $_, << "+", << "."];
   \40JavaScript / ECMAScript
=
   *.js
+
   *
   +#![ \t]*[a-z/]+/env kjscmd\\>
.
# What to change.
my @changes= (
   # Format: An anonymous hash for each change.
   #
   # Hash keys:
   #
   # trigger => $SINGLE_STRING
   # trigger => $STRING_ARRAY
   #
   #  Where to start searching for an empty line. Will match only if
   #  followed by whitespace or EOL.
   #
   #  The trigger will be matched against the very beginning of the input
   #  line. All space characters in the trigger text will match one or more
   #  whitespace characters at this position.
   #
   #  The text to add will be inserted before the first empty line following
   #  the matching line, enclosed in tag lines.
   #
   #  If the value for 'trigger' is an anonymous array rather than a string,
   #  multiple triggers may be specified, and the same actions occurs for
   #  every trigger.
   #
   #  Each trigger will only match the first time.
   #
   # ftrigger => $SINGLE_STRING
   # ftrigger => $STRING_ARRAY
   #
   #  Works exactly like 'trigger', but matches whether or not the input line
   #  is prefixed with any amount of whitespace ("fuzzy trigger").
   #
   # add => $MULTILINE_STRING
   #
   #  The text to add. An arbitrary number of full lines, each terminated by
   #  a newline. The newline of the last line is optional and will be
   #  automatically added if missing.
   #
   #  The minimum indentation of all lines is determined and will be
   #  stripped off all lines.
   #
   #  The text may contain references to environment variables of the form
   #  $NAME or ${NAME}. "$" alone can be quoted as "$$". The predefined
   #  variable $NULL contains an empty string. It can be used after
   #  whitespace at the beginning of a line to avoid the removal of
   #  whitespace following it, which might otherwise occur as part of the
   #  minimum indentation stripping as explained above.
   #
   # insert => $MULTILINE_STRING
   #
   #  The text to be inserted directly after the trigger. Same format as for
   #  "add". This text will, however, not become part of the buffer to be
   #  used for "duplicate".
   #
   # duplicate => $SINGLE_MULTILINE_STRING
   # duplicate => $MULTIILINE_STRING_ARRAY
   #
   #  A string or anonymous array of multiline strings, like the value for
   #  the "add"-key.
   #
   #  When the first trigger for an input line matches, and the "add"-text
   #  has been added, the whole section following the trigger line until the
   #  first empty line (after the added text) will be copied to a buffer.
   #
   #  Then, for each string in the duplicates, that buffer will be added,
   #  prefixed by an empty line followed by a line containing only the
   #  duplicate text.
   #
   # duplicate_append => $SINGLE_MULTILINE_STRING
   # duplicate_append => $MULTIILINE_STRING_ARRAY
   #
   #  Same as "duplicate", except that the duplicated section will not be
   #  added immediately after the current section, but rather at the end of
   #  the file. Use this to move duplicated sections after all sections of the
   #  original file (of the unmodified input template file).
     {trigger => ' -break_hardlinks', add => << '.'}
       This is exactly what we want: Break hard links, but not symlinks.
      -break_hardlinks
.
   , {trigger => ' -break_links', add => << '.'}
       Although this would be nice in order to break hard links,
       it unfortunately also breaks symlinks, rendering this
       feature rather useless.
      --break_links
.
   , {trigger => ' -french', add => << '.'}
      -french
.
   , {trigger => "*", add => << "."}
       What a braindead idea! Try word-wrapping a configuration file, for
       instance...
      $USER_nowrap
.
   , {trigger => ['-istep 2', '-istep 4'], add => << '.'}
       # ANSI-Tab text file as global default.
      --guess_indent
      -smarthome
      -indentfirst
      -istep 1
      -indentc 9
      -rmargin 79
.
   , {
      trigger => [
           "+#![ \t]*[a-z/]+/perl\\>"
           , qw/*.pl *.pm/
      ], add => $USER_prog
   }
   , {trigger => [qw/*.tex *.sty/], add => $USER_pnowrap}
   , {trigger => [qw/*.asm *.s *.S/], add => $USER_nowrap}
   , {
      trigger => [qw/*.sml *.ml *.mli/]
      , duplicate => [
           "*\n"
         . "+#![ \t]*[a-z/]+/env[ \t]+[a-z0-9/]+ocaml\\>\n"
         , "*\n+#![ \t]+[a-z0-9/]+ocaml\\>"
      ]
      , add => $USER_OCAML_prog
   }
   , {trigger => [qw/*.c *.h/], add => $USER_prog}
   , {
      trigger => [qw/*.cpp *.c++ *.hpp *.h++/]
      , duplicate => [qw/*.cxx *.C *.hxx *.inl/]
      , add => $USER_prog
   }
   , {trigger => [qw/*.v *.vh/], add => $USER_prog}
   , {trigger => [qw/*.vhd/], add => $USER_prog}
   , {
      trigger => [qw/*.java/], add => $USER_prog
      , duplicate => $USER_JavaScript
   }
   , {trigger => [qw/*.php/], add => $USER_prog}
   , {
      trigger => ["*.py", "+#![ \t]*[a-z/]+/python\\>"]
      , add  => $USER_prog
      , duplicate  => "*\n+#![ \t]*[a-z/]+/env[ \t]+python\\>"
      , duplicate_append  => "*\n+#![ \t]*/bin/sh\\n\"\"\":\"\\n.*\\<python"
   }
   , {
      trigger => "*.lua", add => $USER_prog
      # Disable Lua syntax highlighing because it's severely broken.
      , add  => $USER_prog_x . "   -syntax none"
      , duplicate => [
         "*\n+#!+[ \t]+[a-z/]/lua\\>"
         , "*\n+#!+[ \t]+[a-z/]/env+[ \t]lua\\>"
         , "*\n+#!+[ 	][a-z/]+[a-z/]\\n"
         . "if+[ 	]false\\n"
         . "+[ 	]then\\n+[ 	]--[=[\\n+[ 	]fi\\n"
         . "+[ 	]exec+[ 	]lu[av][0-9]+[0-9.-+_]\\>"
      ]
   }
   , {
      trigger => [qw/*.lisp *.lsp *.sch *.scm *.ss/]
      , duplicate => [
           "*\n"
         . "+#![ \t]*[a-z/]+/env[ \t]*[a-z0-9/]+scheme\\>\n"
         , "*\n+#![ \t]*[a-z0-9/]+scheme\\>"
      ]
      , add => $USER_prog2_x
   }
   , {trigger => [qw/*.el/], add => $USER_prog2_x}
   , {trigger => [qw/*.p *.pas/], add => $USER_prog}
   , {trigger => [qw/*.f *.for *.FOR/], add => $USER_prog}
   , {trigger => [qw/*.y/], add => $USER_prog}
   , {trigger => [qw/*.l/], add => $USER_prog}
   , {trigger => [qw/*.tcl/], add => $USER_TCL}
   , {trigger => [qw/*.sql/], add => $USER_prog}
   , {trigger => [qw/*.xml/], add => $USER_pnowrap}
   , {trigger => [qw/*.xsd/], add => $USER_pnowrap}
   , {trigger => [qw/*.htm *.html/], add => $USER_pnowrap}
   , {trigger => "*jpicorc.in", add => $USER_NEWSTUFF}
   , {trigger => "*.rb", add => $USER_RUBY}
   , {trigger => "*.rs", add => $USER_prog}
   , {trigger => [qw/*.scala *.sc/], add => $USER_prog}
   , {trigger => "*.jl", add => $USER_prog}
);


use strict;
use Fcntl qw(SEEK_SET);


# Regex catching any of the triggers.
sub globrx(\@) {
   my $changes= shift;
   my $any= join '|', map "(?:$_)", map @{$_->{trigger}}, @$changes;
   return qr/$any/;
}


my($c, $i, $any, $st, $k, $t, @list);
foreach ($begin_modification_tag, $end_modification_tag) {
   $_= "$_\n";
}
# Preprocess @changes.
foreach $c (@changes) {
   # Keys which must exist.
   foreach $k (qw[trigger|ftrigger add]) {
      @list= split '\|', $k;
      undef $any;
      foreach $i (@list)  {
         if (exists $c->{$i}) {
            $any= 1; last;
         }
      }
      unless ($any) {
         die "Missing key ", join(
            " or ", map "'$_'", @list
         )," in \@changes entry!";
      }
   }
   # Keys for values to be coerced into arrays of strings.
   foreach $k (qw/trigger ftrigger duplicate duplicate_append/) {
      unless (exists $c->{$k}) {$c->{$k}= []}
      elsif (!ref $c->{$k}) {$c->{$k}= [$c->{$k}]}
   }
   foreach $k (@{$c->{trigger}}) {
      if (($t)= $k =~ /^[ ](.*)/) {
         $t= quotemeta $t;
         $t= qr/\s+ $t/x;
      } else {
         $t= quotemeta $k;
      }
      $k= qr/ ^ $t (?: \s | $ ) /x;
   }
   # Merge 'ftrigger' (differently preprocessed) into 'trigger'.
   foreach $k (@{$c->{ftrigger}}) {
      $t= quotemeta $k;
      $k= qr/ ^ \s* $t (?: \s | $ ) /x;
      push @{$c->{trigger}}, $k;
   }
   delete $c->{ftrigger};
   sub rlcip(\$) {
      # Remove longest common indentation prefix from lines. Only after
      # that, expand any environment variable references.
      my $ref= shift;
      my $t= $$ref;
      chomp $t;
      my @lines= split '\n', $t, -1;
      my $i;
      OUTER: for ($i= 1;; ++$i) {
         undef $t;
         foreach $k (@lines) {
            last OUTER if length($k) < $i;
            unless (defined $t) {
               $t= substr $k, 0, $i;
               last OUTER unless $t =~ /\s$/;
               next;
            }
            last OUTER if substr($k, 0, $i) ne $t;
         }
      }
      --$i;
      $$ref= join "\n", (map {s/\s*$//; $_} map substr($_, $i), @lines), '';
      $$ref =~ s<
         \$
         (?:
            \{ (\w+) \} # $1.
            | (\w+) # $2.
            | \$ # Neither.
         )
      ><
         $1 || $2 ? do {
            my $v;
            unless (defined($v = $ENV{$1 || $2})) {
               die "Undefined \$ENV{" . ($1 || $2) . "}";
            }
            $v;
         } : '$'
      >gex;
   }
   foreach $k (qw/duplicate duplicate_append/) {
      if (@{$c->{$k}}) {
         $c->{buffer}= '';
         $c->{collecting}= 1;
         rlcip $_ foreach @{$c->{$k}};
      }
   }
   foreach $k (qw/add insert/) {
      $c->{$k} || next;
      rlcip $c->{$k};
   }
}
$any= globrx @changes;
# Convert the files.
foreach my $joerc (@joerc_files) {
   unless (open IN, '<', $joerc->{original}) {
      next unless $joerc->{critical};
      die "Cannot open original '$joerc->{original}' input file: $!";
   }
   open OUT, '>', $joerc->{modified_target}
      or die "Cannot create '$joerc->{modified_target}' output file: $!"
   ;
   open TMP, "+>", undef or die "Cannot create temporary file: $!";
   $st= 0;
   while (defined($_= <IN>)) {
      if ($st == 0) {
         # Just normally copying lines.
         if ($any && /$any/) {
            # Some trigger matches.
            undef $c;
            SEARCH: foreach $t (@changes) {
               for ($i= @{$t->{trigger}}; $i--; ) {
                  if (/$t->{trigger}->[$i]/) {
                     $c= $t;
                     splice @{$t->{trigger}}, $i, 1;
                     $any= globrx @changes;
                     last SEARCH;
                  }
               }
            }
            unless ($c) {
               undef $any;
               next;
            }
            $st= exists $c->{insert} ? 2 : 1;
         }
      } elsif ($st == 1) {
         # Within triggered section.
         if (/^\s*$/) {
            # End of triggered section found.
            $t= $c->{add};
            $c->{buffer}.= $t if $c->{collecting};
            print OUT $begin_modification_tag . $t . $end_modification_tag;
            if (@{$c->{duplicate}}) {
               die unless defined $c->{buffer};
               foreach $k (@{$c->{duplicate}}) {
                  print OUT
                     $begin_modification_tag . "\n" . $k
                     . $c->{buffer} . $end_modification_tag
                  ;
               }
               $c->{duplicate}= [];
            }
            if (@{$c->{duplicate_append}}) {
               die unless defined $c->{buffer};
               foreach $k (@{$c->{duplicate_append}}) {
                  print TMP
                     $begin_modification_tag . "\n" . $k
                     . $c->{buffer} . $end_modification_tag
                  ;
               }
               $c->{duplicate_append}= [];
            }
            foreach (qw/buffer collecting/) {
               undef $c->{$_} if exists $c->{$_};
            }
            $st= 0;
         } elsif ($c->{collecting}) {
            $c->{buffer}.= $_;
         }
      } elsif ($st == 2) {
         # After triggered line.
         print OUT
            $begin_modification_tag . $c->{insert} . $end_modification_tag
         ;
         $st= 1;
      }
      print OUT $_;
   }
   seek TMP, 0, SEEK_SET or die $!;
   print OUT <TMP>;
   close TMP or die "Cannot close temporary file: $!";
   close OUT or die "Cannot finish writing '$joerc->{modified_target}': $!";
   close IN or die $!;
}
