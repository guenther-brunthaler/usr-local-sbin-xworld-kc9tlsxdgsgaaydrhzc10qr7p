#! /bin/sh
show_version() {
	wr <<- .
	$APP version 13.62

	(c) 2008-2013 by Guenther Brunthaler.\n
	Distribution is permitted under the terms of the GPLv3.
.
}
APP=${0##*/}


show_help() {
	wr <<- .
	$APP - Synchronize shared libraries for root jail or initrd
	
	Usage: $APP [ options ]

	Run $APP from the directory containing the directory tree which
	which shall become the root-directory of your root jail (or initrd) at
	some later time.

	$APP will first remove any old contents of ./lib in order to avoid
	keeping around outdated dependencies, except for a subdirectory
	"./lib/dlopen" if it exists.
	
	Next it will hard-link any files in subdirectory "./lib/dopen/*",
	if it exists, into directory ./lib/.
	
	It will then recursively scan all executables in the directory tree
	for required shared library dependencies, and will copy all those
	libraries from your real filesystem into ./lib.
	
	Next, any libraries required by the newly copied libraries themselves
	will be copied in the same way, and so on, until all dependencies have
	been resolved successfully.
	
	Finally, all required symlinks in ./lib will be set up as well.
	
	The net result of running $APP is that ./lib will contain all
	required libraries (no need for a ./usr/lib).
	
	It should especially *not* be necessary to use ldconfig to create a
	linker cache or setting up the LD_LIBRARY_PATH environment variable
	when actually using the root jail - the root jail or initrd should
	work right out of the box now.
	
	Options:
	
	-h: Show this help.\n
	-V: Show only the version information.
.
	echo
	show_version
}


die() {
	echo "ERROR: $*" >& 2
	false; exit
}


run() {
	"$@" || die "Could not execute >>>$*<<<: Return code ${?}!"
}


system() {
	REPLY=`run "$@"` || exit
}


print() {
	run printf '%s' "$*"
}


println() {
	run printf '%s\n' "$*"
}


wr() {
	local REPLY
	while IFS= read -r REPLY
	do
		{
			while test -n "$REPLY" || IFS= read -r REPLY
			do
				ORIG=$REPLY; REPLY=${REPLY%\\n}
				println "$REPLY"
				test x"$ORIG" != x"$REPLY"  && break
				REPLY=
			done
		} | run fmt -w "$LINEWIDTH" || exit
	done
}
# Determine up line width to use for output.
LINEWIDTH=; tty -s && LINEWIDTH=`tput cols` || LINEWIDTH=; : ${LINEWIDTH:=70}


libfilter() {
	perl -ne '
		if (
			m@
				^ \s+
				(?:
					(/.*?) | .* => \s+ (/.*?)
				)
				\s+ \(0x [[:xdigit:]]+ \)
			@x
		) {print "$+\n"}
        		            
	'
}


tfile() {
	local NAME_axpy49v3dqu1chnlphv7e7yug
	NAME_axpy49v3dqu1chnlphv7e7yug="`run tempfile`"
	test -n "$NAME_axpy49v3dqu1chnlphv7e7yug" \
		|| die "Could not create temporary file!"
	eval $1=\$NAME_axpy49v3dqu1chnlphv7e7yug
}


wrout() {
	if test $# = 0; then
		wr
	else
		printf "%s\n" "$*" | wr
	fi
}


show_help | less -F
read -p "Press Enter to continue or Ctrl-C to abort. " DUMMY
echo
system pwd; PWD=$REPLY
run test -d lib && run test "x$PWD" != x/
find lib -path lib/dlopen -prune -o -name '*.so*' -type f -exec rm "{}" \;
find lib -path 'lib/dlopen/*.so*' -type f -exec ln "{}" lib/ \;
tfile NAMES
wrout "Collecting executables in '$PWD'-subtree..."
run find -xdev -type f -executable > $NAMES
tfile FILED
wrout "Identifying dynamically linked executables..."
run file -f $NAMES > $FILED
run test x"`wc -l $NAMES | cut -d' ' -f1`" = x"`wc -l $FILED | cut -d' ' -f1`"
tfile CANDIDATES
wrout "Determining referenced shared libraries..."
run paste -d: $NAMES $FILED | run grep ELF | run grep executable \
	| run cut -d: -f1 | run sort -u \
	| while IFS= read -r FILE; do
		ldd "$FILE" 2> /dev/null
	done | libfilter | run sort -u > $CANDIDATES
tfile DLLS
wrout "Determining nested shared library dependencies..."
while true; do
	run cat $CANDIDATES > $DLLS
	ANY=
	while IFS= read -r FILE; do
		ldd "$FILE" 2> /dev/null | libfilter \
		| while IFS= read -r DLL; do
			fgrep -x "$DLL" > /dev/null 2>& 1 && continue
			run printf "%s\n" "$DLL" >> $DLLS
			ANY=Y
		done
	done < $CANDIDATES
	test -n "$ANY" || break
	run sort -u < $DLLS > $CANDIDATES
done
wrout "Copying all referenced shared libraries to '$PWD/lib'..."
while IFS= read -r FILE; do
	while test -L "$FILE"; do
		system readlink -f "$FILE"; FILE=$REPLY
	done
	DF=lib/${FILE##*/}
	run cp -va "$FILE" "$DF"
done < $CANDIDATES
run rm $NAMES $FILED $DLLS $CANDIDATES
wrout "Running ldconfig to create any required symlinks" \
	"(using '`pwd`' as '/')..."
/sbin/ldconfig -v -r . -N -f /dev/null || die "Cannot update library symlinks!"
echo
wrout "Success! '$PWD/lib' now contains all shared libraries" \
	"which are required by the executables in '$PWD'."
