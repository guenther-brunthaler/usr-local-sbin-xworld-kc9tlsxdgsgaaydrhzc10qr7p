#! /bin/sh
show_version() {
	wr . <<-.
	$APP version 9.217

	(c) 2009 by Guenther Brunthaler.
	Distribution is allowed under the terms of the GPLv3.
.
}


show_help() {
	wr <<-.
	$APP - mount TrueCrypt volumes based on matching volume backup files
	
	$APP takes a TrueCrypt container as its arguments, looks up the
	required key file and mounts it as a virtual decrypted device mapper
	block device. If a mount point for the corresponding virtual decrypted
	block device is known, the file system on the virtual decrypted block
	device is also mounted.
	
	
	Usage: $APP [options] <tc_container> [ <mount_point> ]


	<tc_container>: A block device containing the encrypted volume. If the
	--file option is also specified, <tc_container> must refer to an
	encrypted container file instead.
	
	<mount_point>: Where to mount the virtual decrypted contents of the
	encrypted filesystem from <tc_container>. If omitted, the
	corresponding entry from /etc/fstab will be used if present. If no
	such matching entry is found, only the virtual decrypted block device
	will be mounted, but no attempt will be made to also mount any
	filesystem on it.
	
	
	Command line options accepted by $APP:
		
	--file, --container-is-file: If this option is used, <tc_container>
	must refer to a file containing an encrypted block device rather than
	to a block device.

	--pwlist <filepath>, --password-list <filepath>: Location of the
	password file. May be a symlink. The contents of the password file
	itself are not used, but the directory containing the password file
	will be used to locate other directories. To be more precise, the
	parent directory of the directory containing the password file will be
	used as the base path for the --volume-headers-relative-path option.
	If omitted, --pwlist defaults to "$PWLIST".

	-r, --read-only, --readonly: Instructs TrueCrypt to map and/or mount
	the TrueCrypt container in read-only mode. This ensures no unintended
	changes can be made to the decrypted virtual block device or file
	system.

	-N <integer>, --device-number <integer>, --mapping-number <integer>:
	Specifies the number TrueCrypt shall use in the name of the mapping
	file. If omitted, an unassigned number is picked at random from the
	numerical range 1 to 9999 with preference of the range 1 to 99.

	-M <string>, --mount-options <string>: Allows additional mount options
	to be passed through to 'mount' when mounting the virtual decrypted
	filesystem. Useful for specifying a fixed user and group ownership for
	filesystems which do not store such information, such as FAT.

	--volume-headers-relative-path <reldirpath>: This is a relative
	directory path to the TrueCrypt volume header backup files for the
	volumes which can be handled by $APP. <reldirpath> must be a path
	relative to the parent directory of the directory containing the file
	$PWLIST (see the --pwlist option how to change the path to this file).
	If this option is omitted, <reldirpath> defaults to
	"$VOLHEADERS_RELPATH". For each TrueCrypt volume to be supported by
	$APP, some file "<name>.hdr" must be present in the volumen header
	backup directory. This will be used to look up the required key file,
	which has to be found under the name "<name>.key" in the key files
	directory (see option --key-files-relative-path).

	--key-files-relative-path <reldirpath>: This specifies the location of
	the directory containing the TrueCrypt key file required for unlocking
	the encrypted <tc_container>. This is a path relative to the location
	of the volume header backup directory (see the
	--volume-headers-relative-path option for details). If omitted, the
	key files are assumed to be located at the relative path
	"$KEYFILES_RELPATH".

	--device-mapper-prefix <prefix>: This specifies where the Linux device
	mapper creates its mapping device nodes, including the device name
	prefix for TrueCrypt mapping devices. Defaults to "$MAPPER_PREFIX" if
	omitted.

	--: Stop parsing for command line options. Any arguments following
	this option will be interpreted as normal arguments, even if they
	start with "-" or "--".

	-h, --help, --usage: Display this help.
	
	-v, --verbose: Be more verbose.

	-V, --version: Show version information.

	
	"Switch clustering" for short-options (single-dash options) is
	supported. For instance, when specifying two separate options "-x" and
	"-y", the combined option argument "-xy" means exactly the same thing.


	Details on operation of $APP

	
	In order to find the required decryption key, two directories are
	required which should be located in secure locations (i. e.
	representing mounted instances of encrypted filesystems themselves).
	
	The first required directory must contain backups of all TrueCrypt
	volume headers which are to be supported by $APP. All files in that
	directory which have the file extension .hdr will be scanned whether
	they match the current backup of the TrueCrypt volume headers of the
	TrueCrypt container to be mounted.
	
	If a matching .hdr file has been found, a .key file with the same
	basename is assumed to contain the required decryption key for the
	volume. The .key file will be searched in the second of the required
	directories, which must contain all the key files for the TrueCrypt
	containers supported by $APP.
	
	In addition to binary key files, files containing text passwords can
	only be used. Any such files must also be present in the key files
	directory, but have a file extension ".psw" instead of ".key".
	
	Either a password file, a key file, or both must be present.
	
	
.
	show_version
}


die() {
	echo "ERROR: $*" >& 2
	false; exit
}


run() {
	"$@" && return
	die "Cannot execute >>>$*<<<: Return code ${?}!"
}


system() {
	REPLY=`run "$@"` || exit
}


# Wrap stdin or arguments to $LINEWIDTH characters.
# If $1 is ".", wrap only but do not fill paragraphs.
wr() {
	local S
	if test x"$1" = x"."
	then
		S=-s; shift
	fi
	if test $# -gt 0
	then
		run printf '%s\n' "$*" | wr
	else
		run fmt $S -w $LINEWIDTH
	fi
}


inform() {
	test -z "$VERBOSE" || echo "INFO: $*" >& 2
}


chksum() {
	run md5sum -b | run cut -d' ' -f1
}


find_file() {
	find "$DIR" -type f -name "*.hdr" | while read FILE
	do
		CHK=`chksum < "$FILE"`
		if test x$CHK = x$MD5SUM
		then
			printf "%s\n" "$FILE"
			break
		fi
	done
}


find_tc_slots() {
	truecrypt -l 2> /dev/null | sed -e '
		/truecrypt[0-9]/ {
			s/[^ ]*truecrypt\([0-9]*\).*/\1/
			p
		}
		d
	'
}


find_free_tc_slot() {
	truecrypt -l 2> /dev/null | awk '
		{
			if (match($1, "truecrypt([0-9]*)", m)) s[m[1]]= 1
		}
		END {
			srand()
			for (dim= 100; dim < 10000; dim*= 10) {
				b= int(rand() * (dim - 1)) + 1
				for (i= b + 1; i != b; ++i) {
					if (i >= dim) i= 1;
					if (!(i in s)) {
						print i
						exit
					}
				}
			}
			print "No empty slots!" > "/dev/stderr"
			exit 1
		}
	'
}


# Just calls TrueCrypt with all the arguments, except for the first argument
# which must be the filename of a password file.
#
# The contents of that password file will be piped to TrueCrypt as standard
# input.
tc_psw_wrapper() {
	local PSW_FILE
	PSW_FILE=$1; shift
	cat "$PSW_FILE" | truecrypt "$@"
}


APP=${0##*/}
# Determine output line width.
LINEWIDTH=
REPLY=
tty -s <& 1 && system tput cols
LINEWIDTH=${REPLY:-70}
# Start of command line processing.
# Define presets.
PWLIST="$HOME/.pwlist"
VOLHEADERS_RELPATH="Backups/Volume Headers"
KEYFILES_RELPATH="../../Key Files"
MAPPER_PREFIX=/dev/mapper/truecrypt
MOUNT_OPTIONS=
CONTAINER_IS_FILE=
RO_MODE=
NUM=
DEV=
MP=
VERBOSE=
#
COPTS=
while :
do
	if test -z "$COPTS"
	then
		case "$1" in
			-?*) COPTS="$1"; shift;;
			*) break;;
		esac
	fi
	if test "${COPTS#--}" = "$COPTS"
	then
		TAIL="${COPTS#-?}"; # Switch clustering.
		COPT="${COPTS%$TAIL}"; COPTS="${TAIL:+-}$TAIL"
	else
		COPT="$COPTS"; COPTS=
	fi
	# Any arguments are at $1 and onwards; must be shifted off.
	case "$COPT" in
		--) break;; # Must be first!
		--file | --container-is-file) CONTAINER_IS_FILE=Y;;
		--pwlist | --password-list) PWLIST=$1; shift;;
		-r | --read-only | --readonly) RO_MODE=Y;;
		-N | --device-number | --mapping-number) NUM=$1; shift;;
		-M | --mount-options) MOUNT_OPTIONS=$1; shift;;
		--volume-headers-relative-path) VOLHEADERS_RELPATH=$1; shift;;
		--key-files-relative-path) KEYFILES_RELPATH=$1; shift;;
		--device-mapper-prefix) MAPPER_PREFIX=$1; shift;;
                -h | --help) show_help | less --quit-if-one-screen; exit;;
		-v | --verbose) VERBOSE=Y;;
		-V | --version) show_version; exit;;
		*) die "Unknown option '$COPT'!";; # Must be last!
	esac
done
# Shift off required ordinal arguments.
test $# -ge 1 || die "Missing argument - TrueCrypt container file or device!"
DEV="$1"; shift
# Shift off optional ordinal arguments.
test $# -ge 1 && { MP="$1"; shift; }
# Check for excess arguments.
test $# = 0 || die "Unexpected excess arguments: $*"
# End of command line processing.
if test -n "$CONTAINER_IS_FILE"
then
	run test -f "$DEV"
else
	run test -b "$DEV"
fi
if test -n "$MP"
then
	run test -d "$MP"
	system readlink -f "$MP"; MP=$REPLY
fi
MD5SUM=`
	truecrypt --backup-headers /dev/stderr "$DEV" 2>& 1 > /dev/null \
		| chksum
`
inform "TrueCrypt header checksum of \"$DEV\" is $MD5SUM!"
run test -f "$PWLIST"
system readlink -f "$PWLIST"; PWLIST=$REPLY
system dirname "$PWLIST"; DIR=$REPLY
system readlink -f "$DIR/.."; DIR=$REPLY
system readlink -f "$DIR/$VOLHEADERS_RELPATH"; DIR=$REPLY
FILE=`find_file`
test -n "$FILE" || die "Could not look up encryption key!"
inform "Matching header \"$FILE\" found in store."
FILE=${FILE#$DIR/}
system readlink -f "$DIR/$KEYFILES_RELPATH"; DIR=$REPLY
FILE=$DIR/${FILE%.hdr}
QFILE=$FILE.key; QPSW=$FILE.psw
FILE=$QFILE; PSW=$QPSW
test -f "$FILE" || FILE=
test -f "$PSW" || PSW=
test -n "$FILE$PSW" \
	|| die "Cannot locate key file \"$QFILE\" " \
		"and/or password file \"$QPSW\"!"
if test -z "$NUM"
then
	system find_free_tc_slot; NUM=$REPLY
fi
if test -n "$PSW"
then
	set -- tc_psw_wrapper "$PSW"
else
	set -- truecrypt
fi
set -- "$@" -N "$NUM"
if test -n "$RO_MODE"
then
	set -- "$@" --read-only
	MOUNT_OPTIONS="$MOUNT_OPTIONS${MOUNT_OPTIONS:+,}ro"
fi
test -n "$MOUNT_OPTIONS" && set -- "$@" --mount-options "$MOUNT_OPTIONS"
test -n "$FILE" && set -- "$@" -k "$FILE"
test -z "$PSW" && set -- "$@" -p ''
set -- "$@" "$DEV"
test -n "$MP" && set -- "$@" "$MP"
run "$@"
DEV=$MAPPER_PREFIX$NUM
test -b "$DEV"
set -- "$DEV"
test -n "$MP" && set -- "$@" "@ '$MP'"
run printf '%s\n' "$*"
