#!/bin/sh
# Sync portage tree and update. Additional flags such
# as --newuse or --ask may be added.
# Add -S to skip syncing portage, and -P to skip prelinking.
# $HeadURL: /caches/xsvn/uxadm/trunk/usr/local/sbin/update-system $
# $Author: root $
# $Date: 2007-10-13T16:27:08.967904Z $
# $Revision: 1023 $


usage() {
	cat <<- EOT | fmt -w `tput cols` | less -F
	${0##*/} - update Gentoo installation

	Usage: ${0##*/} [ options ] [ <level> ]

	<levels> supported (default level = 2):

	1: Just do an emerge --sync. Also updates any installed ebuild
	indexing database.

	2: Also apply any affecting GLSA security fixes.

	3: Also update the "world" package (but no deep dependencies except
	for those required by the "world" updates.

	4: Also update packages which are affected by changed USE flags.

	5: Also update deep "world" depencencies.

	options:

	--ask, -a:

	  Ask before starting the package updates. Only effective
	  when performing a level 3 or higher update.

	--prelink, -p:

	  Perform a prelink run at the end of successful operation.

	--no-sync, -S:

	  Omit the level 1 actions when executing a higher level.

	--help, -h: Display this help text.

	--verbose, -v: Verbose operation.

	--dry-run, --simulate, -n:

	  Just print what would be done, but don't actually do anything.

	Version 1.0
	Written by Guenther Brunthaler in 2007.
	EOT
}
                                                                                                                             

die() {
	{
		echo "ERROR: $*"
		echo "Use '${0##*/} --help' for help."
	} >& 2
	exit 1
}


prelink_exit() {
	test -n "$PRELINK" && $CPFX prelink-system
	exit
}


# Start of command line processing.
# Define presets.
VERBOSE=
DRY=
ASK=
PRELINK=
SYNC=1
LEVEL=2
#
COPTS=
while true; do
	if [ -z "$COPTS" ]; then
		case "$1" in
			-?*) COPTS="$1"; shift;;
			*) break;;
		esac
	fi
	if [ "${COPTS#--}" = "$COPTS" ]; then
		TAIL="${COPTS#-?}"; # Switch clustering.
		COPT="${COPTS%$TAIL}"; COPTS="${TAIL:+-}$TAIL"
	else
		COPT="$COPTS"; COPTS=
	fi
	# Any arguments are at $1 and onwards; must be shifted off.
	case "$COPT" in
		--) break;; # Must be first!
                --help | -h) usage; exit;;
		--version)
			# Sychronize this with the usage text!
			echo "Version 1.0"
			exit;;
		--verbose | -v) VERBOSE=1;;
		--dry-run | --simulate | -n) DRY=1;;
		-p | --prelink) PRELINK=1;;
		-S | --no-sync) SYNC=;;
		-a | --ask) ASK=--ask;;
		*) die "Unknown option '$COPT'!";; # Must be last!
	esac
done
# Shift off ordinal arguments.
test $# -ge 1 && { LEVEL="$1"; shift; }
#test $# -ge 1 || die "Missing argument - <level>!"
#LEVEL="$1"; shift
# Check for excess arguments.
#test $# = 0 || die "Unexpected excess arguments: $*"
# End of command line processing.
CPFX=
test "$DRY" = 1 && CPFX=echo
if
	[ "`printf %s "$LEVEL" | sed -e 's:[^0-9]*::'`" != "$LEVEL" ] \
	|| [ "$LEVEL" -lt 1 ] || [ "$LEVEL" -gt 5 ]
then
	die "Unsupported <level> has been specified!"
fi
if [ -n "$SYNC" ]; then
	SYNC="emerge --sync"
	for SY in eix-sync esync; do
		if which "$SY" > /dev/null 2>& 1; then
			SYNC=$SY
			break
		fi
	done
	$CPFX $SYNC || exit
fi
LEVEL=`expr $LEVEL - 1`; test $LEVEL = 0 && exit
$CPFX glsa-check --fix affected || exit
LEVEL=`expr $LEVEL - 1`; test $LEVEL = 0 && prelink_exit
EMG_OPTS="--update${ASK:+ }$ASK"
if [ $LEVEL != 1 ]; then
	EMG_OPTS="$EMG_OPTS --newuse"
	LEVEL=`expr $LEVEL - 1`
fi
if [ $LEVEL != 1 ]; then
	EMG_OPTS="$EMG_OPTS --deep"
	LEVEL=`expr $LEVEL - 1`
fi
$CPFX emerge $EMG_OPTS world || exit
prelink_exit
