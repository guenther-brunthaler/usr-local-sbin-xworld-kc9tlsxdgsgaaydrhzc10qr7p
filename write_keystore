#! /usr/bin/perl -w


use strict;
use File::Spec::Functions qw(catpath catfile canonpath);


my $keystore= "/dev/mapper/truecrypt4_62";
my $srcfile= shift;


=JUNK
sub tname {
   my $count= shift || 1;
   my($n, @results);
   for (my $i= 0; @results < $count; ++$i) {
      $n= "${srcfile}_${$}_${i}~";
      -e "$n" && next;
      push @results, $n;
   }
   return @results;
}
=cut


{
   package file;
   use Carp;
   use POSIX qw(SEEK_SET);
   
   
   # $self->{xx_fh}.
   # $self->{xx_desc}.
   # $self->{xx_name}.


   sub new {
      my($self, %opts)= @_;
      local *FH;
      foreach (qw/-name -mode -purpose/) {
         croak "Missing required argument '$_'" unless exists $opts{$_};
      }
      unless (open FH, $opts{-mode}, $opts{-name}) {
         croak "Could not open file \"$opts{-name}\" for $opts{-purpose}: $!";
      }
      $self= bless {} if !ref $self;
      $self->{xx_name}= $opts{-name};
      $self->{xx_desc}= "file \"$opts{-name}\" which has been"
         . " opened for $opts{-purpose}"
      ;
      $self->{xx_fh}= *FH{IO};
      if ($opts{-binary} && !binmode FH) {
         croak "Could not switch to binary mode $self->{xx_desc}: $!";
      }
      return $self;
   }


   sub print {
      my $self= shift;
      if (@_ == 0) {
         return $self->print($_);
      }
      undef $!;
      print {$self->{xx_fh}} @_;
      croak "Error writing $self->{xx_desc}: $!" if $!;
   }
   
   
   sub readline {
      my $self= shift;
      my $result;
      undef $!;
      unless (defined($result= readline $self->{xx_fh})) {
         croak "Error reading $self->{xx_desc}: $!" if $!;
      }
      return $result;
   }

   
   sub tell {
      my $self= shift;
      if ((my $result= tell $self->{xx_fh}) != -1) {
         return $result;
      }
      croak "Error determining current file position"
         . " in $self->{xx_desc}: $!"
      ;
   }
   
   
   sub rewind {
      my $self= shift;
      unless (seek $self->{xx_fh}, 0, SEEK_SET) {
         croak "Error resetting file pointer of $self->{xx_desc}: $!";
      }
   }


   sub setpos {
      my($self, $pos)= @_;
      unless (seek $self->{xx_fh}, $pos, SEEK_SET) {
         croak "Error set file pointer of $self->{xx_desc}"
            . " to position $pos: $!"
         ;
      }
   }
   
   
   sub read {
      my($self, $bufref, $bytes)= ($_[0], \$_[1], $_[2]);
      my($read, @more);
      @more= $_[3] if @_ > 3;
      unless (
         defined($read= read $self->{xx_fh}, $$bufref, $bytes, @more)
      ) {
         croak "Could not read $bytes bytes from $self->{xx_desc}: $!";
      }
      return $read;
   }
   
   
   sub mustread {
      my($self, $bufref, $bytes, $offset)= ($_[0], \$_[1], $_[2], $_[3]);
      my($read);
      $offset||= 0;
      while ($bytes > 0) {
         $read= CORE::read $self->{xx_fh}, $$bufref, $bytes, $offset;
         die if $read > $bytes;
         $offset+= $read;
         $bytes-= $read;
      }
   }


   DESTROY {
      my $self= shift;
      unless (close $self->{xx_fh}) {
         croak "Could not close $self->{xx_desc}: $!";
      }
   }
}


die "Usage: $0 <keylist-specfile>" unless -f $srcfile && @ARGV == 0;
die "Keystore '$keystore' is not mounted" unless -b $keystore;
my $keys= '.pwlist';
$keys= catfile(canonpath($ENV{HOME}), $keys);
$keys= qx"readlink --canonicalize -- \"$keys\""; chomp $keys;
$keys= qx"dirname -- \"$keys\""; chomp $keys;
$keys= qx"readlink --canonicalize -- \"$keys/../Key Files\""; chomp $keys;
my $hdr_blocks= 1;
my($hdr_size, $free_block);
my $kfh= new file qw/-mode > -binary 1 -purpose writing/, -name => $keystore;
my $sfh= new file qw/-mode < -purpose reading/, -name => $srcfile;
my($key, $keyfile, $size, $pos, $buf, $nkeys);
my $blocksize= 64;
for (my $st= 0;;) {
   $free_block= $hdr_blocks;
   $nkeys= 0;
   while (defined($_= $sfh->readline)) {
      s/\s+$//;
      if (($key, undef, $keyfile)= m!^([-_A-Za-z0-9]+):(\d+):([^:/]+)$!) {
         $kfh->print("$key:$free_block:$keyfile\012");
         if ($st == 1) {
            $pos= $kfh->tell;
            print "Placing keyfile \"$keyfile\""
               . " as block $free_block with key \"$key\".\n"
            ;
            $kfh->setpos($free_block * $blocksize);
            my $kffh= new file
               qw/-mode < -binary 1 -purpose reading/
               , -name => catfile($keys, $keyfile)
            ;
            $kffh->mustread($buf, 64);
            $kfh->print($buf);
            ++$nkeys;
            $kfh->setpos($pos);
         }
         ++$free_block;
      } elsif (/^\s*EOF$/) {
         last;
      } else {
         $kfh->print("$_\012");
      }
   }
   $kfh->print("EOF\012");
   for ($size= $kfh->tell; $size % $blocksize != 0; ++$size) {
      $kfh->print("\0"); # Pad to block size.
   }
   if (($size/= $blocksize) > $hdr_blocks) {
      die unless $st == 0; # Determine header size mode.
      $hdr_blocks= $size;
   } elsif ($st == 0) {
      die unless $size == $hdr_blocks;
      $st= 1; # Transfer keyfiles mode.
   } else {
      die unless $st == 1;
      last;
   }
   $sfh->rewind;
   $kfh->rewind;
}
print "Written $hdr_blocks header blocks and $nkeys crypto key blocks.\n";
print "All blocks are $blocksize bytes.\n"
